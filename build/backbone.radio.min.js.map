{"version":3,"sources":["backbone.radio.min.js"],"names":["global","factory","exports","module","require","define","amd","Backbone","Radio","_","this","removeHandler","store","name","callback","context","event","_callback","removeHandlers","names","keys","matched","i","length","_partial","channelName","_logs","bind","log","makeCallback","isFunction","_typeof","Symbol","iterator","obj","constructor","prototype","previousRadio","AwaitValue","value","AsyncGenerator","gen","send","key","arg","Promise","resolve","reject","request","next","back","front","resume","result","then","settle","done","err","type","_invoke","undefined","asyncIterator","wrap","fn","apply","arguments","await","VERSION","noConflict","DEBUG","_debugText","warning","eventName","debugLog","console","warn","eventSplitter","_eventsApi","action","rest","results","concat","test","extend","split","l","_callHandler","args","a1","a2","a3","call","toArray","slice","tuneIn","channel","_tunedIn","on","tuneOut","off","Requests","requests","_requests","handler","reply","replyOnce","self","once","stopReplying","_channels","Error","Channel","Events","reset","stopListening","systems","each","system","method","methodName","channels"],"mappings":"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","file":"backbone.radio.min.js","sourcesContent":["// Backbone.Radio v2.0.0\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone'], factory) :\n  (global.Backbone = global.Backbone || {}, global.Backbone.Radio = factory(global._,global.Backbone));\n}(this, (function (_,Backbone) { 'use strict';\n\n_ = 'default' in _ ? _['default'] : _;\nBackbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar previousRadio = Backbone.Radio;\n\nvar Radio = Backbone.Radio = {};\n\nRadio.VERSION = '2.0.0';\n\n// This allows you to run multiple instances of Radio on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Radio.\nRadio.noConflict = function () {\n  Backbone.Radio = previousRadio;\n  return this;\n};\n\n// Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n// get around the issues of lack of warnings when events are mis-typed.\nRadio.DEBUG = false;\n\n// Format debug text.\nRadio._debugText = function (warning, eventName, channelName) {\n  return warning + (channelName ? ' on the ' + channelName + ' channel' : '') + ': \"' + eventName + '\"';\n};\n\n// This is the method that's called when an unregistered event was called.\n// By default, it logs warning to the console. By overriding this you could\n// make it throw an Error, for instance. This would make firing a nonexistent event\n// have the same consequence as firing a nonexistent method on an Object.\nRadio.debugLog = function (warning, eventName, channelName) {\n  if (Radio.DEBUG && console && console.warn) {\n    console.warn(Radio._debugText(warning, eventName, channelName));\n  }\n};\n\nvar eventSplitter = /\\s+/;\n\n// An internal method used to handle Radio's method overloading for Requests.\n// It's borrowed from Backbone.Events. It differs from Backbone's overload\n// API (which is used in Backbone.Events) in that it doesn't support space-separated\n// event names.\nRadio._eventsApi = function (obj, action, name, rest) {\n  if (!name) {\n    return false;\n  }\n\n  var results = {};\n\n  // Handle event maps.\n  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n    for (var key in name) {\n      var result = obj[action].apply(obj, [key, name[key]].concat(rest));\n      eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n    }\n    return results;\n  }\n\n  // Handle space separated event names.\n  if (eventSplitter.test(name)) {\n    var names = name.split(eventSplitter);\n    for (var i = 0, l = names.length; i < l; i++) {\n      results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest));\n    }\n    return results;\n  }\n\n  return false;\n};\n\n// An optimized way to execute callbacks.\nRadio._callHandler = function (callback, context, args) {\n  var a1 = args[0],\n      a2 = args[1],\n      a3 = args[2];\n  switch (args.length) {\n    case 0:\n      return callback.call(context);\n    case 1:\n      return callback.call(context, a1);\n    case 2:\n      return callback.call(context, a1, a2);\n    case 3:\n      return callback.call(context, a1, a2, a3);\n    default:\n      return callback.apply(context, args);\n  }\n};\n\n// A helper used by `off` methods to the handler from the store\nfunction removeHandler(store, name, callback, context) {\n  var event = store[name];\n  if ((!callback || callback === event.callback || callback === event.callback._callback) && (!context || context === event.context)) {\n    delete store[name];\n    return true;\n  }\n}\n\nfunction removeHandlers(store, name, callback, context) {\n  store || (store = {});\n  var names = name ? [name] : _.keys(store);\n  var matched = false;\n\n  for (var i = 0, length = names.length; i < length; i++) {\n    name = names[i];\n\n    // If there's no event by this name, log it and continue\n    // with the loop\n    if (!store[name]) {\n      continue;\n    }\n\n    if (removeHandler(store, name, callback, context)) {\n      matched = true;\n    }\n  }\n\n  return matched;\n}\n\n/*\n * tune-in\n * -------\n * Get console logs of a channel's activity\n *\n */\n\nvar _logs = {};\n\n// This is to produce an identical function in both tuneIn and tuneOut,\n// so that Backbone.Events unregisters it.\nfunction _partial(channelName) {\n  return _logs[channelName] || (_logs[channelName] = _.bind(Radio.log, Radio, channelName));\n}\n\n_.extend(Radio, {\n\n  // Log information about the channel and event\n  log: function log(channelName, eventName) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n    var args = _.toArray(arguments).slice(2);\n    console.log('[' + channelName + '] \"' + eventName + '\"', args);\n  },\n\n  // Logs all events on this channel to the console. It sets an\n  // internal value on the channel telling it we're listening,\n  // then sets a listener on the Backbone.Events\n  tuneIn: function tuneIn(channelName) {\n    var channel = Radio.channel(channelName);\n    channel._tunedIn = true;\n    channel.on('all', _partial(channelName));\n    return this;\n  },\n\n  // Stop logging all of the activities on this channel to the console\n  tuneOut: function tuneOut(channelName) {\n    var channel = Radio.channel(channelName);\n    channel._tunedIn = false;\n    channel.off('all', _partial(channelName));\n    delete _logs[channelName];\n    return this;\n  }\n});\n\n/*\n * Backbone.Radio.Requests\n * -----------------------\n * A messaging system for requesting data.\n *\n */\n\nfunction makeCallback(callback) {\n  return _.isFunction(callback) ? callback : function () {\n    return callback;\n  };\n}\n\nRadio.Requests = {\n\n  // Make a request\n  request: function request(name) {\n    var args = _.toArray(arguments).slice(1);\n    var results = Radio._eventsApi(this, 'request', name, args);\n    if (results) {\n      return results;\n    }\n    var channelName = this.channelName;\n    var requests = this._requests;\n\n    // Check if we should log the request, and if so, do it\n    if (channelName && this._tunedIn) {\n      Radio.log.apply(this, [channelName, name].concat(args));\n    }\n\n    // If the request isn't handled, log it in DEBUG mode and exit\n    if (requests && (requests[name] || requests['default'])) {\n      var handler = requests[name] || requests['default'];\n      args = requests[name] ? args : arguments;\n      return Radio._callHandler(handler.callback, handler.context, args);\n    } else {\n      Radio.debugLog('An unhandled request was fired', name, channelName);\n    }\n  },\n\n  // Set up a handler for a request\n  reply: function reply(name, callback, context) {\n    if (Radio._eventsApi(this, 'reply', name, [callback, context])) {\n      return this;\n    }\n\n    this._requests || (this._requests = {});\n\n    if (this._requests[name]) {\n      Radio.debugLog('A request was overwritten', name, this.channelName);\n    }\n\n    this._requests[name] = {\n      callback: makeCallback(callback),\n      context: context || this\n    };\n\n    return this;\n  },\n\n  // Set up a handler that can only be requested once\n  replyOnce: function replyOnce(name, callback, context) {\n    if (Radio._eventsApi(this, 'replyOnce', name, [callback, context])) {\n      return this;\n    }\n\n    var self = this;\n\n    var once = _.once(function () {\n      self.stopReplying(name);\n      return makeCallback(callback).apply(this, arguments);\n    });\n\n    return this.reply(name, once, context);\n  },\n\n  // Remove handler(s)\n  stopReplying: function stopReplying(name, callback, context) {\n    if (Radio._eventsApi(this, 'stopReplying', name)) {\n      return this;\n    }\n\n    // Remove everything if there are no arguments passed\n    if (!name && !callback && !context) {\n      delete this._requests;\n    } else if (!removeHandlers(this._requests, name, callback, context)) {\n      Radio.debugLog('Attempted to remove the unregistered request', name, this.channelName);\n    }\n\n    return this;\n  }\n};\n\n/*\n * Backbone.Radio.channel\n * ----------------------\n * Get a reference to a channel by name.\n *\n */\n\nRadio._channels = {};\n\nRadio.channel = function (channelName) {\n  if (!channelName) {\n    throw new Error('You must provide a name for the channel.');\n  }\n\n  if (Radio._channels[channelName]) {\n    return Radio._channels[channelName];\n  } else {\n    return Radio._channels[channelName] = new Radio.Channel(channelName);\n  }\n};\n\n/*\n * Backbone.Radio.Channel\n * ----------------------\n * A Channel is an object that extends from Backbone.Events,\n * and Radio.Requests.\n *\n */\n\nRadio.Channel = function (channelName) {\n  this.channelName = channelName;\n};\n\n_.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n\n  // Remove all handlers from the messaging systems of this channel\n  reset: function reset() {\n    this.off();\n    this.stopListening();\n    this.stopReplying();\n    return this;\n  }\n});\n\n/*\n * Top-level API\n * -------------\n * Supplies the 'top-level API' for working with Channels directly\n * from Backbone.Radio.\n *\n */\n\nvar channel;\nvar args;\nvar systems = [Backbone.Events, Radio.Requests];\n\n_.each(systems, function (system) {\n  _.each(system, function (method, methodName) {\n    Radio[methodName] = function (channelName) {\n      args = _.toArray(arguments).slice(1);\n      channel = this.channel(channelName);\n      return channel[methodName].apply(channel, args);\n    };\n  });\n});\n\nRadio.reset = function (channelName) {\n  var channels = !channelName ? this._channels : [this._channels[channelName]];\n  _.each(channels, function (channel) {\n    channel.reset();\n  });\n};\n\nreturn Radio;\n\n})));\n\n//# sourceMappingURL=./backbone.radio.js.map"],"sourceRoot":"/source/"}